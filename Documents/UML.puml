@startuml
class GameManager {
    - static GameManager instance
    - int lives
    - int currentWave
    - int gold
    - Map map
    - Leaderboard leaderboard
    - Player player
    + startGame()
    + restartGame()
    + endGame()
    + static getInstance() : GameManager
}

class Map {
    - List<Tower> towers
    - List<Enemy> enemies
    - int width
    - int height
    + placeTower(Tower tower, int x, int y)
    + removeTower(Tower tower)
    + update()
    + isPathBlocked() : boolean
}

class Tower {
    - ITowerStrategy attackStrategy
    - String type
    - int damage
    - float attackSpeed
    - int range
    - int cost
    - TowerEffect effect
    + attack(Enemy enemy)
    + clone() : Tower
    + upgradeRange(int amount)
    + upgradeDamage(int amount)
    + upgradeCooldown(float amount)
    + setStrategy(ITowerStrategy strategy)
}

interface ITowerStrategy {
    + executeAttack(Enemy enemy)
}

class SingleTargetStrategy implements ITowerStrategy {
    + executeAttack(Enemy enemy)
}

class AreaOfEffectStrategy implements ITowerStrategy {
    + executeAttack(Enemy enemy)
}

interface TowerFactory {
    + createTower(String type) : Tower
}

class TowerEffect {
    - String effectType
    - float magnitude
    - int duration
    + applyEffect(Enemy enemy)
}

class BurnEffect extends TowerEffect {
    + applyEffect(Enemy enemy)
}

class SlowEffect extends TowerEffect {
    + applyEffect(Enemy enemy)
}

class PoisonEffect extends TowerEffect {
    + applyEffect(Enemy enemy)
}

class Enemy {
    - String type
    - int health
    - float speed
    - int damage
    - int reward
    - List<TowerEffect> effects
    + move()
    + takeDamage(int damage)
    + applyEffect(TowerEffect effect)
    + onDeath()
    + updateEffects()
}

class EnemyFactory {
    + createEnemy(String type) : Enemy
}

abstract class TowerDecorator extends Tower {
    - Tower decoratedTower
    + attack(Enemy enemy)
    + getCost() : int
}

class DamageUpgradeDecorator extends TowerDecorator {
    + DamageUpgradeDecorator(Tower tower)
    + attack(Enemy enemy)
    + getCost() : int
}

class RangeUpgradeDecorator extends TowerDecorator {
    + RangeUpgradeDecorator(Tower tower)
    + attack(Enemy enemy)
    + getCost() : int
}

class SpeedUpgradeDecorator extends TowerDecorator {
    + SpeedUpgradeDecorator(Tower tower)
    + attack(Enemy enemy)
    + getCost() : int
}

class Player {
    - String name
    - int score
    - int goldEarned
    + updateScore(int wavesSurvived)
    + spendGold(int amount) : boolean
    + earnGold(int amount)
}

class Leaderboard {
    - List<Player> players
    + addScore(Player player)
    + getTopScores(int topN)
}

GameManager "1" *-- "1" Map
GameManager "1" *-- "1" Leaderboard
GameManager "1" *-- "1" Player
Map "1" *-- "0..*" Tower
Map "1" *-- "0..*" Enemy
Tower "1" *-- "1" ITowerStrategy
Tower "1" *-- "1" TowerEffect
TowerFactory "1" *-- "0..*" Tower
TowerEffect "0..*" *-- "1" Enemy
EnemyFactory "1" *-- "0..*" Enemy
Leaderboard "1" *-- "0..*" Player
TowerDecorator "0..*" o-- "1" Tower
@enduml